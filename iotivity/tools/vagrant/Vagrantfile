# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # We are not trying to provision multiple boxes at once, this
  # is just a trick to give a name other than "default" to the box.
  # Pick the stanza you want. Warning: non-LTS releases vanish fast!
  config.vm.define "iotivity1604" do |iotivity1604|
    # Every Vagrant virtual environment requires a box to build off of.
    iotivity1604.vm.box = "bento/ubuntu-16.04"
    iotivity1604.vm.hostname = "iotivity1604"
  end
  #config.vm.define "iotivity1704" do |iotivity1704|
  #  # Every Vagrant virtual environment requires a box to build off of.
  #  iotivity1704.vm.box = "bento/ubuntu-17.04"
  #  iotivity1704.vm.hostname = "iotivity1704"
  #end
  #config.vm.define "iotivity1710" do |iotivity1710|
  #  # Every Vagrant virtual environment requires a box to build off of.
  #  iotivity1710.vm.box = "bento/ubuntu-17.10"
  #  iotivity1710.vm.hostname = "iotivity1710"
  #end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # iotivity: to enable this box to participate in the network so other
  # iotivity devices can see it, we want this:
  config.vm.network "public_network"

  #config.vm.post_up_message "This is a test message.  Try 'vagrant ssh'"

  # Provider-specific configuration example:
  config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting
      vb.gui = false
      # Customize memory in VM - 2GB about minimum for full building/testing
      vb.memory = "2048"
  end

  # Provision the VM:
  # copies current user's files, maybe use a separate key for Vagrant?
  config.vm.provision :file, source: "~/.gitconfig", destination: ".gitconfig"
  config.vm.provision :file, source: "~/.ssh/id_rsa", destination: ".ssh/id_rsa"
  config.vm.provision :file, source: "~/.ssh/id_rsa.pub", destination: ".ssh/id_rsa.pub"
  config.vm.provision :file, source: "~/.ssh/known_hosts", destination: ".ssh/known_hosts"
  config.vm.provision :file, source: "~/.ssh/config", destination: ".ssh/config"

  # Provision the needed distro packages
  config.vm.provision :shell, inline: <<-SHELL
    apt-get update
    apt-get -qy upgrade
    # for C/C++ development:
    apt-get -qy install \
        build-essential git scons ssh unzip valgrind \
        doxygen libtool autoconf pkg-config gcovr \
        libboost-all-dev libsqlite3-dev \
        uuid-dev libglib2.0-dev libcurl4-gnutls-dev \
        libbz2-dev
    # for Android/Java development:
    apt-get -qy install openjdk-8-jdk icedtea-plugin
    apt-get clean
  SHELL

  # run a script to provision iotivity project itself
  config.vm.provision :shell do |shell|
    shell.path = "iotivity-setup.sh"
    #shell.args = "-no-android -no-adruino"
    shell.privileged = false
  end
end
