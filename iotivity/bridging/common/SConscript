#******************************************************************
#
# Copyright 2017 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
##
# MPM Common Plugin build script
##

import os
import os.path

Import('env')

target_os = env.get('TARGET_OS')
src_dir = env.get('SRC_DIR')
bridging_path = os.path.join(src_dir, 'bridging')

mpmcommon_env = env.Clone()

print("Reading MPM Common Plugin script")


def maskFlags(flags):
    flags = [flags.replace('-Wl,--no-undefined', '') for flags in flags]
    return flags


######################################################################
# Build flags
######################################################################

mpmcommon_env.PrependUnique(CPPPATH=[
    '#/resource/include',
    '#/bridging/include',
    '#/resource/c_common',
    '#/resource/c_common/ocrandom/include',
    '#/resource/c_common/oic_malloc/include',
    '#/resource/c_common/oic_string/include',
])

if target_os not in ['windows']:
    mpmcommon_env.AppendUnique(
        CXXFLAGS=['-std=c++0x', '-Wall', '-Wextra', '-Werror', '-fpic'])

mpmcommon_env['LINKFLAGS'] = maskFlags(mpmcommon_env['LINKFLAGS'])

mpmcommon_env.PrependUnique(LIBS=[
    'm',
    'octbstack',
    'ocsrm',
    'connectivity_abstraction',
    'coap',
    'curl',
])

#####################################################################
# Source files and Target(s)
######################################################################

mpmcommon_src = [
    'pluginIf.cpp',
    'pluginServer.cpp',
    'pipeHandler.cpp',
    'messageHandler.cpp',
    'curlClient.cpp',
    'pluginProcess.cpp',
    'ConcurrentIotivityUtils.cpp',
]

mpmcommon_env.AppendUnique(MPMCOMMON_SRC=mpmcommon_src)
mpmcommonlib = mpmcommon_env.StaticLibrary('mpmcommon',
                                           mpmcommon_env.get('MPMCOMMON_SRC'))
mpmcommon_env.InstallTarget(mpmcommonlib, 'mpmcommon')
mpmcommon_env.UserInstallTargetLib(mpmcommonlib, 'mpmcommon')
