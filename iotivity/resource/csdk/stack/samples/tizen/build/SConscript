##
# CA build script
##

SConscript('./resource/csdk/connectivity/build/SConscript')

Import('env')

target_os = env.get('TARGET_OS')
transport = env.get('TARGET_TRANSPORT')
buildsample = env.get('BUILD_SAMPLE')
release_mode = env.get('RELEASE')
secured = env.get('SECURED')
logging = env.get('LOGGING')
routing = env.get('ROUTING')
with_proxy = env.get('WITH_PROXY')
with_tcp = env.get('WITH_TCP')
with_mq = env.get('WITH_MQ')

with_upstream_libcoap = env.get('WITH_UPSTREAM_LIBCOAP')
if with_upstream_libcoap == '1':
    env.AppendUnique(CPPPATH=['#extlibs/libcoap/libcoap/include'])
else:
    env.AppendUnique(CPPPATH=['../../../../connectivity/lib/libcoap-4.1.1'])

env.PrependUnique(CPPPATH=[
    '../../../../logger/include',
    '../../../../include',
    '../../../../stack/include',
    '../../../../../oc_logger/include'
])

env.AppendUnique(CPPDEFINES=['TB_LOG'])
if routing == 'GW':
    env.AppendUnique(CPPDEFINES=['ROUTING_GATEWAY'])
elif routing == 'EP':
    env.AppendUnique(CPPDEFINES=['ROUTING_EP'])
env.AppendUnique(CPPDEFINES=['__TIZEN__'])

print("Given Transport is %s" % transport)
print("Given OS is %s" % target_os)
print("Given MQ is %s" % with_mq)

gbs_command_prefix = ""
if (('BLE' in transport) or ('ALL' in transport)):
    print("Tizen BLE requires tizen 3.0 profile")
    gbs_command_prefix += "gbsprofile=tizen_3_0 "

if target_os == 'tizen':
    command = gbs_command_prefix + "./resource/csdk/stack/samples/tizen/build/gbsbuild.sh %s %s %s %s %s %s %s %s %s" % (
        transport, secured, buildsample, release_mode, logging, routing,
        with_tcp, with_proxy, with_mq)
    print("Created Command is %s" % command)
    gbs_script = env.Command('gbs_build', None, command)
    AlwaysBuild('gbs_script')
