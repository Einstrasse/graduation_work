apply plugin: 'com.android.library'
// Top-level build file where you can add configuration options common to all sub-projects/modules.

android {
    compileSdkVersion 21
    buildToolsVersion '20.0.0'
    archivesBaseName = "iotivity"

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${outputFile.name}"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
    
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    repositories {
        flatDir {
            dirs '../../../../../../java/iotivity-android/build/outputs/aar', '../../../../../java/iotivity-android/build/outputs/aar'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
       abortOnError false
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            jni.srcDirs = [] //disable automatic ndk-build call
            jniLibs.srcDir new File(buildDir, 'native-libs')
        }
        //androidTest.setRoot('src/androidTest')        
    }
}

dependencies {
    compile ":iotivity-base-${RELEASE}@aar"
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
}

////////////////
////NDK Support
////////////////
//If using this, Android studio will fail run the following to set the environment variable for android studio:
//launchctl setenv ANDROID_NDK_HOME
//otherwise remove the dependsOn part and run ./gradlew buildNative from the command line
task copyNativeLibs(type: Copy, dependsOn: 'buildNative') {
    dependsOn 'buildNative'
    from(new File('src/main/libs/armeabi')) { include '**/*.so' exclude '**/libgnustl_shared.so', '**/liboc.so', '**/libocstack-jni.so'}
    into new File(buildDir, 'native-libs/armeabi')
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) {
    pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}

task buildNative(type: Exec) {
    if (System.env.ANDROID_NDK_HOME != null) {
        //for windows use 'ndk-build.cmd'
        //def ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build.cmd')
        def ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build')
        commandLine ndkBuild, "APP_ABI=$TARGET_ARCH", "APP_OPTIM=$RELEASE", '-C', file('src/main').absolutePath
    } else {
        println '##################'
        println 'Skipping NDK build'
        println 'Reason: ANDROID_NDK_HOME not set.'
        println '##################'
    }
}